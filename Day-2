Day 2: Understanding Iteration for Values vs. Iteration for Indices â€“ "Best Time to Buy and Sell Stock"
For my second day of LeetCode practice, I decided to pick a slightly trickier problem. This one helped me understand something fundamentalâ€”the difference between iterating to get a value and iterating to get an index.

Whenever we use the infamous variable i, the syntax and purpose completely change depending on whether we're working with values or indices. This realization became clearer as I tackled this problem.

The Problem
Imagine you're tracking stock prices over a series of days, and you want to maximize profit by buying and selling at the right times.

Constraints
You can only buy once and sell once.
You must buy before you sell (no short selling).
If prices only decrease, return 0 since no profit is possible.
Example

prices = [7, 1, 5, 3, 6, 4]
The best strategy:
Buy at 1 (Day 2)
Sell at 6 (Day 5)
Profit = 6 - 1 = 5

My Initial Thoughts
At first, my approach was straightforward:

Find the lowest in the array -> TO BUY
Highest from the position of the lowest -> TO SELL

I expected this to work seamlessly, so I wrote my first attempt:

  def find(arr):
    lowest= arr[0]
    lowest_index=0
    for i in range(1,len(arr)):
      lowest < arr[i]
      lowest = arr[i]
      lowest_index=i
    highest = arr[lowest_index+1]
    for j in range(lowest_index+2, len(arr)):
      highest > arr[j]
      highest= arr[j]
 arr=[1,23,2,34,7]
 find(arr).print
 print(lowest, lowest_index, highest)     

So this gave me the highest value after the lowest had been found.
But it fails majority since it did not handle edge cases, such as when lowest is the last element.

This would crash because highest = arr[lowest_index + 1] wouldnâ€™t exist.
Now what is remaining is to make sure it handles all the test cases/exceptions 

Final Updated Code
Once I caught those mistakes, I wrote a cleaner version that handled all edge cases properly.
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices or len(prices) < 2:  # Handle edge case: Empty list or single element
            return 0  

        # Step 1: Find the lowest price and its index
        lowest = prices[0]
        lowest_index = 0

        for i in range(1, len(prices)):  # Start from index 1
            if prices[i] < lowest:
                lowest = prices[i]
                lowest_index = i  # Store lowest index

        # Step 2: Ensure there's a valid "highest" price after the lowest index
        if lowest_index == len(prices) - 1:  # If lowest is last element
            return 0  # No possible profit

        highest = prices[lowest_index + 1]  # Start checking from the next element

        for j in range(lowest_index + 2, len(prices)):  # Loop through elements after lowest
            if prices[j] > highest:
                highest = prices[j]

        # Step 3: Calculate and return profit
        profit = highest - lowest if highest > lowest else 0
        return profit

# Example Usage
solution = Solution()
prices = [7, 1, 5, 3, 6, 4]
print(solution.maxProfit(prices))  # Output: 5 (Buy at 1, Sell at 6)

BUT THIS APPROACH PASSED ONLY HALF OF THE TEST CASES.
This is because:
1) I tried to find the lowest price first, then looked for the highest.
But what if the lowest price appears late in the array?
I might miss a better buy-sell pair earlier.
  
2)I didnâ€™t update the lowest price dynamically.
Instead of assuming one lowest price, we need to update it whenever we find a new lower price.

3)I didnâ€™t track profit at every step.
The best profit may not come from just the absolute lowest and highest price, but rather from the best buy-sell opportunity available at any point.

So what we do now is,
Keep track of the lowest price seen so far.
At each step, check if selling at the current price gives the best profit.
Update max profit whenever we find a better opportunity

We will iterate through the prices list once, keeping track of:

The lowest price so far (lowest).
The maximum profit seen so far (max_profit).


The main loop will be :
if prices[I] < lowest:
    lowest = prices[I]
else :
    profits.append(prices[i] - lowest)

in layman terms,
If the current value is less than the lowest then update the current value as the lowest.
now we wont calcute profits if the current value is the lowest because why would we want to sell it at the lowest? 
We will nly sell it if it is at the max value . So coming to the else part,
The cursor will only go inside the else part of the current value is not the lowest, in which case we will be calculating the profit and in future we will sell if its the highest.
We keep a profits =[] list to keep all the profts we calculated so far and then we will just return max(profit)

I also realised there is a more efficient way to structure this loop, Thanks to our python's almost english like syntax

Here instead of storing all the profits in a seperate list, we will just find the highest profit possible while iterating through the list of prices.

if prices[I] < lowest:
    lowest = prices[I]
else :
    profit= max(profit , prices[i]-lowest)

Why this is better!!!

Extra memory usage: We donâ€™t need to store all profit valuesâ€”we only need to keep track of the best one.
Extra computation: Finding the max later is unnecessary when we can track it dynamically in a single loop.

So the final sol:
class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
        """
        if not prices or len(prices) < 2:  # Handle edge case: Empty list or single element
            return 0  

        # Step 1: Find the lowest price and its index
        lowest = prices[0]
        max_profit=0

        for i in range(1, len(prices)):  # Start from index 1
            if prices[i] < lowest:
                lowest = prices[i]
            else:
                max_profit= max( max_profit , prices[i]-lowest)
        
        return max_profit if max_profit else 0
        

# Example Usage
solution = Solution()
prices = [7, 1, 5, 3, 6, 4]
print(solution.maxProfit(prices))  # Output: 5 (Buy at 1, Sell at 6)


What this Problem taught me?
This problem helped me refine my approach to tracking values dynamically and understand why some brute-force approaches are inefficient.
ðŸ”¹ Key Takeaways
Always update lowest dynamically while iterating.
Calculate profit at every step, rather than waiting until the lowest is found.
Use a single loop (O(n)) to keep it efficient.
Think dynamically, not step-by-step.
